import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    OneToMany,
    OneToOne,
    CreateDateColumn,
} from 'typeorm';
import { AffectedProduct} from './affectedproduct.entity'
import { Cvss} from './cvss.entity'
import { Exploit } from './exploit.entity'; // Example of related entities
import { Timegap } from './timegap.entity';
import { PatchCommit } from './patchcommit.entity';
import { Fix } from './fix.entity';
import { RawDescription } from './rawdescription.entity';
import { SSVC } from './ssvc.entity';
import { VulnerabilityVersion } from './vulnerabilityversion.entity';
import { VdoCharacteristic } from './vdocharacteristic.entity';
import { NvdData } from './nvd.entity';
import { MitreData } from './mitre.entity';

@Entity({name:'vulnerability'})
export class Vulnerability {
    @PrimaryGeneratedColumn()
    vulnId: number;

    @Column({ unique: true })
    cveId: string;

    @CreateDateColumn()
    createdDate: Date;



    @OneToMany(() => Timegap, (timegap) => timegap.vulnerability)
    timegaps: Timegap[];

    @OneToMany(() => PatchCommit, (patchCommit) => patchCommit.vulnerability)
    patchCommits: PatchCommit[];

    @OneToMany(() => Fix, (fix) => fix.vulnerability)
    fixes: Fix[];

    @OneToMany(
        () => RawDescription,
        (rawDescription) => rawDescription.vulnerability,
    )
    rawDescriptions: RawDescription[];

    @OneToOne(() => SSVC, (ssvc) => ssvc.vulnerability)
    ssvc: SSVC;

    @OneToMany(
        () => VulnerabilityVersion,
        (vulnerabilityVersion) => vulnerabilityVersion.vulnerability,
    )
    vulnerabilityVersions: VulnerabilityVersion[];

    @OneToMany(() => Cvss, cvss => cvss.vulnerability)
    cvssScores: Cvss[];

    @OneToMany(() => VdoCharacteristic, vdoCharacteristic => vdoCharacteristic.vulnerability)
    vdoCharacteristics: VdoCharacteristic[];
    
    @OneToMany(() => AffectedProduct, affectedProduct => affectedProduct.vulnerability)
    affectedProducts: AffectedProduct[];
    @Column()
    vulnVersionId: number;

    @OneToOne(() =>NvdData, (nvdData) => nvdData.vulnerability)
    nvdData:NvdData;

    @OneToOne(() =>MitreData, (mitreData) => mitreData.vulnerability)
    mitreData:MitreData;
}
