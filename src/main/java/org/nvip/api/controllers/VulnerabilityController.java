/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.api.controllers;

import lombok.RequiredArgsConstructor;
import org.nvip.api.serializers.*;
import org.nvip.api.services.VulnService;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;

@RestController
@RequestMapping("/vulnerabilities")
@RequiredArgsConstructor
public class VulnerabilityController {

	final VulnService vulnService;

	@GetMapping
	public ResponseEntity<List<VulnerabilityDTO>> getVulnerabilities(
			@RequestParam(value="startDate", required = false) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE) LocalDate startDate,
			@RequestParam(value="endDate", required = false) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE) LocalDate endDate,
			@RequestParam(value="cvssScores", required = false) double[] cvssScores,
			@RequestParam(value="vdoLabels", required = false) String[] vdoLabels,
			@RequestParam(value="product", required = false) String product,
			@RequestParam(value="keyword", required = false) String keyword,
			@RequestParam(value="limitCount", required = false, defaultValue="100") Integer limitCount
	) {

		LocalDateTime startDateParam = (startDate == null) ? null : LocalDateTime.of(startDate, LocalTime.now());
		LocalDateTime endDateParam = (endDate == null) ? null : LocalDateTime.of(endDate, LocalTime.now());

		List<VulnerabilityDTO> searchResults = vulnService.searchVulns(
				keyword,
				startDateParam,
				endDateParam,
				cvssScores,
				vdoLabels,
				limitCount,
				product);

		return ResponseEntity.ok(searchResults);
	}

	@GetMapping(value = "/date/{createdDate}")
	public ResponseEntity<List<VulnerabilityDTO>> getVulnCreatedDate(@PathVariable(value="createdDate", required = true) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE) LocalDate createdDate) {
		List<VulnerabilityDTO> vulnerabilities = vulnService.findByCreatedDate(createdDate.atStartOfDay(), createdDate.atStartOfDay().plusDays(1));
		return ResponseEntity.ok(vulnerabilities);
	}

	@GetMapping(value="/{id}")
	public ResponseEntity<VulnerabilityDTO> getVulnerability(@PathVariable(value = "id") String cveId) {
		VulnerabilityDTO vulnerability = vulnService.getVulnerability(cveId);
		return ResponseEntity.ok(vulnerability);
	}
}