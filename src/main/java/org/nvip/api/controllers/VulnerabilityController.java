/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.api.controllers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nvip.data.dao.LocalDateSerializer;
import org.nvip.data.dao.SearchDAO;
import org.nvip.data.dao.UserDAO;
import org.nvip.data.repositories.SearchRepository;
import org.nvip.data.repositories.VulnerabilityRepository;
import org.nvip.entities.User;
import org.nvip.entities.Vulnerability;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/vulnerabilities")
public class VulnerabilityController {

	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(VulnerabilityController.class);

final VulnerabilityRepository vulnerabilityRepository;

	public VulnerabilityController(VulnerabilityRepository vulnerabilityRepository) {
		this.vulnerabilityRepository = vulnerabilityRepository;
	}

	@GetMapping
	public List<Vulnerability> getVulnerabilities(
			@RequestParam(value="startDate", required = false) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE) LocalDate startDate,
			@RequestParam(value="endDate", required = false) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE) LocalDate endDate,
			@RequestParam(value="cvssScore", required = false) String[] cvssScores,
			@RequestParam(value="vdoLabels", required = false) String[] vdoLabels,
			@RequestParam(value="product", required = false) String product,
			@RequestParam(value="keyword", required = false) String keyword,
			@RequestParam(value="limitCount", required = false, defaultValue="100") Integer limitCount
	) {

		Map<Integer, List<Vulnerability>> searchResults = vulnerabilityRepository.searchVulnerability(
				keyword,
				startDate,
				endDate,
				cvssScores,
				vdoLabels,
				limitCount,
				product);

		return searchResults.values().stream().findFirst().orElseGet(List::of);
	}

	@GetMapping(value="/{id}")
	public Map<Integer, List<Vulnerability>> getVulnerability(@PathVariable(value = "id") String cveId){
		return vulnerabilityRepository.getByCveId(cveId);
	}

	@GetMapping(value = "/search", produces = "application/json")
	public List<Vulnerability> search(@RequestBody Map<String, String> searchParams) {

		//TODO: Spring Security
//		String userName = req.getParameter("username");
//		String token = req.getParameter("token");
//
//		if (userName == null || token == null)
//			ServletUtil.setResponse(resp, 401, "Unauthorized user!");
//
//		User user = UserDAO.getRoleIDandExpirationDate(userName, token);
//
//		if (user == null)
//			ServletUtil.setResponse(resp, 401, "Unauthorized user!");


		//TODO: Move this to a get endpoint that returns the search info
//		// Section for Search Form info. Used when Search Form is initialized
//		boolean searchInfo = Boolean.parseBoolean(req.getParameter("searchInfo"));
//		if (searchInfo) {
//			Map<String, Map<String, String[]>> searchMap = SearchDAO.getSearchInfo();
//			map = new JsonObject();
//
//			String jObj = gson.toJson(searchMap);
//
//			generateResp(jObj, resp);
//
//			return; // End the method
//		}

		String keyword = searchParams.getOrDefault("keyword", "").split(" ")[0];

		LocalDate startDate = searchParams.get("startDate") == null ? null
				: LocalDate.parse(searchParams.get("startDate"));
		LocalDate endDate = searchParams.get("endDate") == null ? null
				: LocalDate.parse(searchParams.get("endDate"));
		String[] cvssScores = searchParams.get("cvssScores") == null ? null
				: searchParams.get("cvssScores").split(",");
		String[] vdoLabels = searchParams.get("vdoLabels") == null ? null
				: searchParams.get("vdoLabels").split(",");
		int limitCount = searchParams.get("limitCount") == null ? 0
				: Integer.parseInt(searchParams.get("limitCount"));
		String product = searchParams.getOrDefault("product", null);

		Map<Integer, List<Vulnerability>> searchResults = vulnerabilityRepository.searchVulnerability(keyword, startDate,
				endDate, cvssScores, vdoLabels, limitCount, product);

		return searchResults.values().stream().findFirst().orElseGet(List::of);
	}
}