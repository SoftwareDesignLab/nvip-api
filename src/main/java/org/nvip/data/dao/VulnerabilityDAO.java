/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.data.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import org.nvip.data.DBConnect;
import org.nvip.entities.CvssScore;
import org.nvip.entities.Product;
import org.nvip.entities.VdoCharacteristic;
import org.nvip.entities.Vulnerability;
import org.nvip.util.VulnerabilityUtil;

public class VulnerabilityDAO {
	private static String dbType = DBConnect.getDatabaseType();
	private static final Logger logger = LogManager.getLogger(VulnerabilityDAO.class);

	/*
	private Timestamp fixedDate = null;
	private String[] sources = {};
	private VdoCharacteristic[] vdoList = {};
	private CvssScore[] cvssScoreList = null;
	private Product[] products = null;
	*/

	public static List<Vulnerability> getVulnerabilityByMatch(String match) {
		try (Connection conn = DBConnect.getConnection()) {
			List<Vulnerability> vulns = new ArrayList<Vulnerability>();
			PreparedStatement stmt = conn
					.prepareStatement("SELECT v.vuln_id, v.cve_id, v.description, v.platform, v.published_date, v.last_modified " + "FROM vulnerability v WHERE v.description LIKE ?");
			stmt.setString(1, "%" + match + "%");

			ResultSet rs = stmt.executeQuery();

			while (rs.next()) {
				vulns.add(new Vulnerability(rs.getInt("vuln_id"), rs.getString("cve_id"), rs.getString("description"), rs.getString("platform"), LocalDateTime.parse(rs.getString("published_date")),
						LocalDateTime.parse(rs.getString("last_modified"))));
			}

			return vulns;
		} catch (SQLException e) {
			logger.error(e.getMessage());
		}

		return null;
	}

	/**
	 * Retrieves the vulnerabilities that have been updated within a given number of
	 * days from the current date.
	 * 
	 * @param dateRange Number of days before the current date that vulnerabilities
	 *                  will be gathered from
	 * @return Map of vulnerabilities mapped by the date associated with the when
	 *         the vulnerability was updated and the list of vulnerabilities that
	 *         were updated at that date
	 */
	public static Map<LocalDate, List<Vulnerability>> getDailyVulnerabilities(int dateRange) {

		String query = "select * from vulnerabilityaggregate WHERE run_date_time BETWEEN ? AND ? ORDER BY exists_at_nvd ASC;";
//		try (Connection conn = DBConnect.getConnection(); PreparedStatement stmt = conn.prepareStatement(query);) {
//			// Get the CVEs for the last 3 days from 2 days ago to today (inclusive)
//			LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT).plusDays(1);
//
//			stmt.setTimestamp(1, Timestamp.valueOf(today.minusDays(dateRange)));
//			stmt.setTimestamp(2, Timestamp.valueOf(today));
//
//			Timestamp fixedDate = null;
//			String[] sources = {};
//			VdoCharacteristic[] vdoList = {};
//			CvssScore[] cvssScoreList = null;
//			Map<LocalDate, List<Vulnerability>> dailyVulns = new LinkedHashMap<>();
//			//Product product = null;
//			Product[] products = null;
//
//			// Populate the dailyVulns map with an empty list of vulns for each day of the
//			// search
//			for (int days = dateRange; days > 0; days--)
//				dailyVulns.put(today.minusDays(days).toLocalDate(), new ArrayList<>());
//
//			ResultSet rs = stmt.executeQuery();
//			while (rs.next()) {
//				try {
//					if (dailyVulns.get(rs.getTimestamp("run_date_time").toLocalDateTime().toLocalDate()) == null)
//						continue;
//
//					fixedDate = rs.getTimestamp("fixed_date");
//					vdoList = VulnerabilityUtil.parseVDOList(rs.getString("cve_id"), rs.getString("vdo_labels"), rs.getString("vdo_label_confidences"), rs.getString("vdo_noun_groups"));
//					cvssScoreList = Vu
//
//					lnerabilityUtil.parseCvssScoreList(rs.getString("cve_id"), rs.getString("base_severities"), rs.getString("severity_confidences"), rs.getString("impact_scores"),
//							rs.getString("impact_confidences"));
//
//					products = VulnerabilityUtil.parseProductList(rs.getString("product_id"), rs.getString("cpe"), rs.getString("domain"), rs.getString("version"));
//					// product = new Product(rs.getInt("product_id"), rs.getString("cpe"),
//					// rs.getString("domain"), null, rs.getString("version"));
//
//					dailyVulns.get(rs.getTimestamp("run_date_time").toLocalDateTime().toLocalDate())
//							.add(new Vulnerability(rs.getInt("vuln_id"), rs.getString("cve_id"), rs.getString("description"), rs.getString("platform"), rs.getString("published_date"),
//									rs.getString("last_modified_date"), (fixedDate == null ? null : fixedDate.toLocalDateTime()), rs.getBoolean("exists_at_mitre"), rs.getBoolean("exists_at_nvd"),
//									sources, vdoList, cvssScoreList, products));
//				} catch (Exception e) {
//					e.printStackTrace();
//					logger.error(e.getMessage());
//				}
//			}
//			return dailyVulns;
//		} catch (SQLException e) {
//			logger.error(e.getMessage());
//		}

		return null;
	}

	public static void main(String[] args) {

	}
}