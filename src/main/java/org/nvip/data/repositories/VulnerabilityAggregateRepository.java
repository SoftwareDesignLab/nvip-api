/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.data.repositories;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import jakarta.persistence.Tuple;
import jakarta.persistence.criteria.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nvip.data.DBConnect;
import org.nvip.entities.*;
import org.nvip.util.VulnerabilityUtil;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
public class VulnerabilityAggregateRepository {
	private static String dbType = DBConnect.getDatabaseType();
	private static final Logger logger = LogManager.getLogger(VulnerabilityAggregateRepository.class);

	@PersistenceContext EntityManager entityManager;
	VulnerabilityUtil vulnerabilityUtil;

	public VulnerabilityAggregateRepository(EntityManager entityManager, VulnerabilityUtil vulnerabilityUtil){
		this.entityManager = entityManager;
		this.vulnerabilityUtil = vulnerabilityUtil;
	}

	/**
	 * Retrieves the vulnerabilities that have been updated within a given number of
	 * days from the current date.
	 * 
	 * @param dateRange Number of days before the current date that vulnerabilities
	 *                  will be gathered from
	 * @return Map of vulnerabilities mapped by the date associated with the when
	 *         the vulnerability was updated and the list of vulnerabilities that
	 *         were updated at that date
	 */
	public Map<LocalDate, List<VulnerabilityAggregate>> getDailyVulnerabilities(int dateRange) {

		LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT).plusDays(1);
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<VulnerabilityAggregate> cq = criteriaBuilder.createQuery(VulnerabilityAggregate.class);
		Root<VulnerabilityAggregate> root = cq.from(VulnerabilityAggregate.class);

		return entityManager.createQuery(
				cq.where(
					criteriaBuilder.between(
						root.get("runDateTime"),
						today.minusDays(dateRange),
						today
					)
				)
		)
		.getResultStream()
		.collect(Collectors.groupingBy(x -> x.getRunDateTime().toLocalDate()));
	}
}