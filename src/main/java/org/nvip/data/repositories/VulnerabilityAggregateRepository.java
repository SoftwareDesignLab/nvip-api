/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.data.repositories;

import jakarta.persistence.*;
import jakarta.persistence.criteria.*;
import org.nvip.entities.*;
import org.nvip.util.VulnerabilityUtil;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class VulnerabilityAggregateRepository {

	@PersistenceContext EntityManager entityManager;
	VulnerabilityUtil vulnerabilityUtil;

	public VulnerabilityAggregateRepository(EntityManager entityManager, VulnerabilityUtil vulnerabilityUtil){
		this.entityManager = entityManager;
		this.vulnerabilityUtil = vulnerabilityUtil;
	}

	/**
	 * Retrieves the vulnerabilities that have been updated within a given number of
	 * days from the current date.
	 * 
	 * @param dateRange Number of days before the current date that vulnerabilities
	 *                  will be gathered from
	 * @return Map of vulnerabilities mapped by the date associated with the when
	 *         the vulnerability was updated and the list of vulnerabilities that
	 *         were updated at that date
	 */
	public Map<LocalDate, List<VulnerabilityAggregate>> getDailyVulnerabilities(int dateRange) {

		LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT).plusDays(1);
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<VulnerabilityAggregate> cq = criteriaBuilder.createQuery(VulnerabilityAggregate.class);
		Root<VulnerabilityAggregate> root = cq.from(VulnerabilityAggregate.class);

		return entityManager.createQuery(
				cq.where(
					criteriaBuilder.between(
						root.get("runDateTime"),
						today.minusDays(dateRange),
						today
					)
				)
		)
				.getResultStream()
				.collect(Collectors.groupingBy(x -> x.getRunDateTime().toLocalDate(),
						Collectors.collectingAndThen(Collectors.toList(), entries -> entries.subList(0, Math.min(entries.size(), 10)))));
	}

	public List<VulnerabilityAggregate> getVulnerabilitiesByDate(String date, int pageNum, int pageSize) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDate localDate = LocalDate.parse(date, formatter);
		LocalDateTime start = LocalDateTime.of(localDate, LocalTime.MIDNIGHT);
		LocalDateTime end = LocalDateTime.of(localDate.plusDays(1), LocalTime.MIDNIGHT);
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<VulnerabilityAggregate> cq = criteriaBuilder.createQuery(VulnerabilityAggregate.class);
		Root<VulnerabilityAggregate> root = cq.from(VulnerabilityAggregate.class);

		return entityManager.createQuery(
				cq.where(
					criteriaBuilder.between(
						root.get("runDateTime"),
						start,
						end
					)
				).orderBy(
					criteriaBuilder.desc(root.get("cveId"))
				)
		)
			.setFirstResult(pageNum * pageSize)
			.setMaxResults(pageSize)
			.getResultStream()
			.collect(Collectors.toList());
	}

	//TODO: this will probably change once new db schema is implemented
	public Object vulnCountBetweenDates(LocalDateTime startDate, LocalDateTime endDate) {
//		String jpql = "SELECT COUNT(*) FROM VulnerabilityAggregate va WHERE va.runDateTime BETWEEN :startDate AND :endDate GROUP BY va.runDateTime";
		String jpql = "SELECT COUNT(e) AS count, e.runDateTime AS date FROM VulnerabilityAggregate e WHERE e.runDateTime BETWEEN :startDate AND :endDate GROUP BY e.runDateTime";
		TypedQuery<Tuple> query = entityManager.createQuery(jpql, Tuple.class);
		query.setParameter("startDate", startDate);
		query.setParameter("endDate", endDate);
		return query.getResultList().stream()
				.map(list -> new VulnCount((long) list.get(0), (LocalDateTime) list.get(1)))
				.collect(Collectors.toList());
	}

	public Object getVulnCountRange(int range) {
		LocalDate today = LocalDate.now();
		LocalDateTime startDate = LocalDateTime.of(today.minusDays(range), LocalTime.MIDNIGHT).plusDays(1);
		LocalDateTime endDate = LocalDateTime.of(today, LocalTime.MIDNIGHT).plusDays(1);

		return vulnCountBetweenDates(startDate, endDate);
	}

	public class VulnCount {
		public long count;
		public LocalDateTime date;

		public VulnCount(long count, LocalDateTime date) {
			this.count = count;
			this.date = date;
		}
	}


}