/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.data.repositories;

import jakarta.persistence.*;
import jakarta.persistence.criteria.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nvip.data.DBConnect;
import org.nvip.entities.*;
import org.nvip.util.VulnerabilityUtil;
import org.springframework.stereotype.Service;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;

@Service
public class VulnerabilityRepository {
//	private static String dbType = DBConnect.getDatabaseType();
	private static final Logger logger = LogManager.getLogger(VulnerabilityRepository.class);

	@PersistenceContext EntityManager entityManager;
	VulnerabilityUtil vulnerabilityUtil;

	public VulnerabilityRepository(EntityManager entityManager, VulnerabilityUtil vulnerabilityUtil){
		this.entityManager = entityManager;
		this.vulnerabilityUtil = vulnerabilityUtil;
	}

	/**
	 * Conducts a query to search for a specific CVE by it's ID within the database
	 *
	 * @param cve_id
	 * @return
	 * @throws SQLException
	 */
	public Vulnerability getByCveId(String cveId) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		CriteriaQuery<Vulnerability> query = cq.where(criteriaBuilder.equal(root.get("cveId"), cveId));

		try {
			return entityManager.createQuery(query).getSingleResult();
		} catch (NoResultException e){
			logger.warn(e.getMessage());
			return null;
		}
	}

	public List<Vulnerability> getVulnerabilityByDescriptionMatch(String match) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		CriteriaQuery<Vulnerability> query = cq.multiselect(
				root.get("vulnId"),
				root.get("cveId"),
				root.get("description"),
				root.get("platform"),
				root.get("publishDate"),
				root.get("lastModified")
			)
			.where(criteriaBuilder.like(root.get("description"), "%"+match+"%"));

		return entityManager.createQuery(query)
				.getResultList();
	}

	public Map<Integer, List<Vulnerability>> searchVulnerability(String keyword, LocalDateTime startDate, LocalDateTime endDate, String[] cvssScores, String[] vdoLabels, Integer limitCount, String product) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		Join<Vulnerability, Exploit> exploitJoin = root.join("exploits", JoinType.LEFT);
		Join<Vulnerability, AffectedRelease> affectedReleaseJoin = root.join("affectedReleases", JoinType.LEFT);
		Join<AffectedRelease, Product> productJoin = affectedReleaseJoin.join("product", JoinType.LEFT);
		Join<Object, Object> vdoCharacteristicJoin = root.join("vdoCharacteristics", JoinType.LEFT);
		Join<Object, Object> vdoLabelJoin = vdoCharacteristicJoin.join("vdoLabels", JoinType.LEFT);
		Join<Object, Object> vdoNounGroupJoin = vdoLabelJoin.join("vdoNounGroup", JoinType.LEFT);
//		Join<Object, Object> vdoCharacteristicJoin = (Join<Object, Object>) root.fetch("vdoCharacteristics", JoinType.LEFT);
//		Join<Object, Object> vdoLabelJoin = (Join<Object, Object>) vdoCharacteristicJoin.fetch("vdoLabels", JoinType.LEFT);
//		Join<Object, Object> vdoNounGroupJoin = (Join<Object, Object>) vdoLabelJoin.fetch("vdoNounGroup", JoinType.LEFT);

		Join<Vulnerability, CvssScore> cvssScoreJoin = root.join("cvssScores", JoinType.LEFT);
		Join<CvssScore, CvssSeverity> cvssSeverityJoin = cvssScoreJoin.join("cvssSeverity", JoinType.LEFT);

		List<Predicate> predicates = new ArrayList<>();
		predicates.add(criteriaBuilder.like(root.get("description"), "%"+keyword+"%"));

		if (startDate != null || endDate != null) {
			Join<Vulnerability, VulnerabilityUpdate> updateJoin = root.join("updates", JoinType.LEFT);
			Join<VulnerabilityUpdate, DailyRunHistory> dailyRunHistoryJoin = updateJoin.join("dailyRunHistory", JoinType.LEFT);

			if (startDate != null) {
				predicates.add(criteriaBuilder.greaterThanOrEqualTo(dailyRunHistoryJoin.get("runDateTime"), startDate));
			}

			if (endDate != null) {
				predicates.add(criteriaBuilder.lessThanOrEqualTo(dailyRunHistoryJoin.get("runDateTime"), endDate));
			}
		}

		if (cvssScores != null && cvssScores.length > 0) {
			predicates.add(cvssSeverityJoin.get("cvssSeverityClass").in(Arrays.stream(cvssScores).toList()));
		}

		if (product != null) {
			predicates.add(
					criteriaBuilder.or(
							criteriaBuilder.like(productJoin.get("cpe"), "%"+product+"%"),
							criteriaBuilder.like(productJoin.get("domain"), "%"+product+"%")
					)
			);
		}

		CriteriaQuery<Vulnerability> query = cq.select(root)
//		CriteriaQuery<Vulnerability> query = cq
//		CriteriaQuery<Vulnerability> query = cq.multiselect(
//					root,
//					affectedReleaseJoin
//					productJoin,
//					cvssSeverityJoin
//				)
				.where(predicates.toArray(new Predicate[0]))
				.groupBy(
						root.get("id"),
						affectedReleaseJoin.get("version"),
						productJoin.get("id"),
						cvssSeverityJoin.get("cvssSeverityClass"),
						cvssScoreJoin.get("severityConfidence"),
						cvssScoreJoin.get("impactScore"),
						cvssScoreJoin.get("impactConfidence"),
						exploitJoin.get("publisherUrl")
				)
				.orderBy(
						criteriaBuilder.asc(root.get("existInNvd")),
						criteriaBuilder.desc(root.get("id"))
				);

		if (vdoLabels != null) {
			List<Predicate> having = new ArrayList<>();

			for (String vdoLabel : vdoLabels) {

				// Additional check for Physical label, in case of search for Physical Security,
				// etc.
				if (vdoLabel.equals("Physical")) {
					having.add(criteriaBuilder.like(vdoLabelJoin.get("id"), "%27%"));
				} else {
					having.add(criteriaBuilder.like(vdoLabelJoin.get("vdoLabelName"), "%" + vdoLabel + "%"));
				}
			}

			query.having(
					criteriaBuilder.and(having.toArray(new Predicate[0]))
			);
		}

		List<Vulnerability> vulnerabilities = entityManager.createQuery(query)
				.setMaxResults(limitCount)
				.getResultList();

		Map<Integer, List<Vulnerability>> searchResultMap = new HashMap<>();
		searchResultMap.put(vulnerabilities.size(), vulnerabilities);
		return searchResultMap;
	}

	/**
	 * Get search results from a Review page search query
	 * @param searchDate
	 * @param crawled
	 * @param rejected
	 * @param accepted
	 * @param reviewed
	 * @return
	 */
	public List<Vulnerability> getVulnerabilitiesWithUpdateList(LocalDate searchDate, boolean crawled, boolean rejected, boolean accepted, boolean reviewed) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		Join<Vulnerability, VulnerabilityUpdate> updateJoin = root.join("updates", JoinType.LEFT);
		Join<VulnerabilityUpdate, DailyRunHistory> dailyRunHistoryJoin = updateJoin.join("dailyRunHistory", JoinType.LEFT);

		List<Predicate> predicates = new ArrayList<>();
		LocalDateTime today = LocalDateTime.of(searchDate, LocalTime.MIDNIGHT);
		predicates.add(criteriaBuilder.between(
				dailyRunHistoryJoin.get("runDateTime"),
				today,
				today.plusDays(1)));

		List<Integer> statuses = new ArrayList<>();
		if (crawled) {
			statuses.add(null);
			statuses.add(1);
		}

		if (rejected) {
			statuses.add(2);
		}

		if (reviewed) {
			statuses.add(3);
		}

		if (accepted) {
			statuses.add(4);
		}

		if(!statuses.isEmpty()) {
			predicates.add(root.get("status").in(statuses));
		}

		return entityManager.createQuery(
				cq.where(predicates.toArray(new Predicate[0]))
			).getResultList();
	}
}