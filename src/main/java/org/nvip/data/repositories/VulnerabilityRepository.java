/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.data.repositories;

import jakarta.persistence.*;
import jakarta.persistence.criteria.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nvip.entities.*;
import org.nvip.util.VulnerabilityUtil;
import org.springframework.stereotype.Service;

import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;

@Service
public class VulnerabilityRepository {

	private static final Logger logger = LogManager.getLogger(VulnerabilityRepository.class);

	@PersistenceContext EntityManager entityManager;
	VulnerabilityUtil vulnerabilityUtil;

	public VulnerabilityRepository(EntityManager entityManager, VulnerabilityUtil vulnerabilityUtil){
		this.entityManager = entityManager;
		this.vulnerabilityUtil = vulnerabilityUtil;
	}

	/**
	 * Conducts a query to search for a specific CVE by it's ID within the database
	 *
	 * @param cveId
	 * @return
	 * @throws SQLException
	 */
	public Vulnerability getByCveId(String cveId) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		CriteriaQuery<Vulnerability> query = cq.where(criteriaBuilder.equal(root.get("cveId"), cveId));

		try {
			return entityManager.createQuery(query).getSingleResult();
		} catch (NoResultException e){
			logger.warn(e.getMessage());
			return null;
		}
	}

	public List<Vulnerability> searchVulnerability(String keyword, LocalDateTime startDate, LocalDateTime endDate, int[] cvssScores, String[] vdoLabels, Integer limitCount, String product) {
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<Vulnerability> cq = criteriaBuilder.createQuery(Vulnerability.class);
		Root<Vulnerability> root = cq.from(Vulnerability.class);
		Join<Vulnerability, Exploit> exploitJoin = root.join("exploits", JoinType.LEFT);
		Join<Vulnerability, AffectedProduct> affectedProductJoin = root.join("affectedProducts", JoinType.LEFT);
		Join<Vulnerability, VdoCharacteristic> vdoCharacteristicJoin = root.join("vdoCharacteristics", JoinType.LEFT);
		Join<Vulnerability, Cvss> cvssScoreJoin = root.join("cvssScores", JoinType.LEFT);
		//Join<Vulnerability, Timegap> timegapJoin = root.join("timegap", JoinType.LEFT); // not used, commenting out because it's throwing errors in tests

		System.out.println("LIMIT: " + limitCount);

		List<Predicate> predicates = new ArrayList<>();

		String keywordParam = "";
		if(keyword != null)
			keywordParam = keyword;
		predicates.add(criteriaBuilder.like(root.get("description").get("description"), "%"+keywordParam+"%"));

		if (startDate != null || endDate != null) {
			if (startDate != null) {
				predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("createdDate"), startDate));
			}

			if (endDate != null) {
				predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("createdDate"), endDate));
			}
		}

		if (cvssScores != null && cvssScores.length > 0) {
			List<Double> cvssScoresDouble = new ArrayList<>();
			for (int i : cvssScores) {
				cvssScoresDouble.add((double) i);
			}
			predicates.add(cvssScoreJoin.get("baseScore").in(cvssScoresDouble));
		}

		if (product != null) {
			predicates.add(
					criteriaBuilder.like(affectedProductJoin.get("cpe"), "%"+product+"%")
			);
		}

		if (vdoLabels != null) {
			predicates.add(vdoCharacteristicJoin.get("vdoLabel").in((Object[]) vdoLabels));
		}

		CriteriaQuery<Vulnerability> query = cq.select(root).distinct(true)
				.where(predicates.toArray(new Predicate[0]))
				.groupBy(
					root.get("vulnId")
				)
				.orderBy(
					criteriaBuilder.desc(root.get("vulnId"))
				);

		List<Vulnerability> vulnerabilities = entityManager.createQuery(query)
				.setMaxResults(limitCount)
				.getResultList();

		return vulnerabilities;
	}
}