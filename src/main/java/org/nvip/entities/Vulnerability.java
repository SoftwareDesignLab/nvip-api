/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.entities;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.annotations.NaturalId;
import org.nvip.util.VulnerabilityUtil;

@Entity
@Getter
@Setter
@ToString
public class Vulnerability {
	/*
	 * vulnerability ID. If there is a single vulnerability for a CVE, then CVE Id
	 * is also a unique identifier.
	 */
	@Id
	private int vulnId = 0;

	@NaturalId
//	@Column(name = "cve_id", unique = true)
	private String cveId; // CVE ID

	private String description = null; // CVE description text
	private String platform = null; // Related platform/program and version info
	@Transient private String patch = "N/A"; // Link to patch
	@Basic private LocalDateTime introducedDate; // The date time vulnerability introduced
	@Basic private LocalDateTime publishedDate; // The date time it is published
	@Basic private LocalDateTime createdDate; // The time the entry is created at NVIP DB
	@Basic private LocalDateTime lastModifiedDate; // The most recent crawl date
	@Basic private LocalDate fixedDate; // The time the vulnerability was fixed (a patch published?)

	@Column(name = "exists_at_mitre", columnDefinition = "int")
	private boolean existInMitre = true;// this CVE-ID exists in MITRE feeds?

	@Column(name = "exists_at_nvd", columnDefinition = "int")
	private boolean existInNvd = true; // this CVE-ID exists in NVD feeds?

	@Column private Integer timeGapNvd = 0; // The time gap (hours) between the time NVIP has crawled this and the time it
								// was available at Nvd
	@Column private Integer timeGapMitre = 0; // The time gap (hours) between the time NVIP has crawled this and the time it
									// was available at Mitre

	@Transient private String exploitPublishDate = "N/A";
	@Transient private String exploitUrl = "N/A";

	@ToString.Exclude
//	@OneToMany(mappedBy="vulnerability", fetch = FetchType.EAGER)
	@OneToMany(mappedBy="vulnerability")
	List<CvssScore> cvssScores = new ArrayList<>();
	@Transient private CvssScore[] cvssScoreList = null;

	@ToString.Exclude
//	@OneToMany(mappedBy="vulnerability",  fetch = FetchType.EAGER)
	@OneToMany(mappedBy="vulnerability")
	List<Exploit> exploits = new ArrayList<>();

	@ToString.Exclude
//	@OneToMany(mappedBy="vulnerability", fetch = FetchType.EAGER)
	@OneToMany(mappedBy="vulnerability")
	List<AffectedRelease> affectedReleases = new ArrayList<>();
	@Transient private Product[] products = null;
	@Transient private String[] cpes = null;

	@ToString.Exclude
//	@OneToMany(mappedBy="vulnerability",  fetch = FetchType.EAGER)
	@OneToMany(mappedBy="vulnerability")
	List<VdoCharacteristic> vdoCharacteristics = new ArrayList<>();
	@Transient private VdoCharacteristic[] vdoList = null;

	@ToString.Exclude
//	@OneToMany(mappedBy="vulnerability",  fetch = FetchType.EAGER)
	@OneToMany(mappedBy="vulnerability")
	List<VulnerabilitySourceUrl> sourceUrls = new ArrayList<>();
	@Transient String[] sources = null;

	@ToString.Exclude
//	@OneToMany(mappedBy = "vulnerability",  fetch = FetchType.EAGER)
	@OneToMany(mappedBy = "vulnerability")
	List<VulnerabilityUpdate> updates = new ArrayList<>();

	public Vulnerability() {
		super();
	}

	public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate, LocalDateTime lastModifiedDate) {
		this.vulnId = vulnId;
		this.cveId = cveId;
		this.description = description;
		this.platform = platform;
		this.publishedDate = publishDate;
		this.lastModifiedDate = lastModifiedDate;

		System.out.println(description.charAt(0));
		System.out.println(description.charAt(description.length() - 1));

		if (description != null && description.charAt(0) == '"'
				&& description.charAt(description.length() - 1) == '"') {
			this.description = description.substring(0, description.length() - 1);
			System.out.println(this.description);
		}

	}

	public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishedDate, LocalDateTime lastModifiedDate, boolean existsAtMitre, boolean existsAtNvd) {
		this(vulnId, cveId, description, platform, publishedDate, lastModifiedDate);

		this.existInMitre = existsAtMitre;
		this.existInNvd = existsAtNvd;
	}

	/**
	 * Constructor overload
	 */
	public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate,
						 LocalDateTime lastModifiedDate, LocalDate fixedDate, boolean existInMitre, boolean existInNvd,
			String[] sources, VdoCharacteristic[] vdoList, CvssScore[] cvssScoreList, Product[] products,
			String exploitPublishDate, String exploitUrl) {

		// call existing constructor
		this(vulnId, cveId, description, platform, publishDate, lastModifiedDate, fixedDate, existInMitre, existInNvd,
				sources, vdoList, cvssScoreList, products);

		// set new parameters
		this.exploitPublishDate = exploitPublishDate;
		this.exploitUrl = exploitUrl;

		if (fixedDate != null)
			this.introducedDate = LocalDateTime.of(fixedDate, LocalTime.of(0,0,0));
	}

	public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate,
						 LocalDateTime lastModifiedDate, LocalDate fixedDate, boolean existInMitre, boolean existInNvd,
			String[] sources, VdoCharacteristic[] vdoList, CvssScore[] cvssScoreList, Product[] products) {
		this.vulnId = vulnId;
		this.cveId = cveId;
		this.description = description;
		this.platform = platform;
		this.publishedDate = publishDate;
		this.lastModifiedDate = lastModifiedDate;
		this.fixedDate = fixedDate;
		this.existInMitre = existInMitre;
		this.existInNvd = existInNvd;
		this.sources = sources;
		this.vdoList = vdoList;
		this.cvssScoreList = cvssScoreList;
		this.products = products;

		this.introducedDate = LocalDateTime.of(fixedDate, LocalTime.of(0,0,0));

		// Filter out quotes in description
		if (description != null && description.charAt(0) == '"'
				&& description.charAt(description.length() - 1) == '"') {
			this.description = description.substring(1, description.length() - 1);
		}

		// generate cpes
		cpes = new String[products.length];
		int i = 0;
		for (Product p : products) {
			cpes[i] = p.getCpe();
			i++;
		}
	}

	public Product[] getProduct() {
		return this.getProducts();
	}

	public void setProduct(Product[] product) {
		this.setProducts(product);
	}
}