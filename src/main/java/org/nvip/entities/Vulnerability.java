/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.entities;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.NaturalId;
import org.nvip.util.VulnerabilityUtil;

@Entity
@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class Vulnerability {
	/*
	 * vulnerability ID. If there is a single vulnerability for a CVE, then CVE Id
	 * is also a unique identifier.
	 */
	@Id private int vulnId = 0;

	@NaturalId private String cveId; // CVE ID

	@ManyToOne @JoinColumn(name="description_id", referencedColumnName = "descriptionId")
	private Description description; // CVE description text

	@Basic private LocalDateTime publishedDate; // The date time it is published
	@Basic private LocalDateTime createdDate; // The time the entry is created at NVIP DB
	@Basic private LocalDateTime lastModifiedDate; // The most recent crawl date
//	@Basic private boolean existInNvd; // If vuln is known by NVD
//	@Basic private boolean existInMitre; // If vuln is known by Mitre

	// @Column private Integer statusId = -1;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<Cvss> cvssScores = new ArrayList<>();
	@Transient private Cvss[] cvssScoreList = null;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<Exploit> exploits = new ArrayList<>();

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<AffectedProduct> affectedProducts = new ArrayList<>();
	@Transient private String[] cpes = null;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<VdoCharacteristic> vdoCharacteristics = new ArrayList<>();
	@Transient private VdoCharacteristic[] vdoList = null;

	@ToString.Exclude
	@OneToOne(mappedBy="vulnerability")
	NvdMitreStatus nvdMitreStatus;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<PatchCommit> patchCommits;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<RawDescription> rawDescriptions;

	public String getDescription() {
		return description.getDescription();
	}

	public Vulnerability(int vulnId, String cveId, LocalDateTime publishedDate, LocalDateTime lastModifiedDate, LocalDateTime createdDate) {
		this.vulnId = vulnId;
		this.cveId = cveId;
		this.publishedDate = publishedDate;
		this.lastModifiedDate = lastModifiedDate;
		this.createdDate = createdDate;
	}

	// public Vulnerability() {
	// 	super();
	// }

	// public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate, LocalDateTime lastModifiedDate) {
	// 	this.vulnId = vulnId;
	// 	this.cveId = cveId;
	// 	this.description = description;
	// 	this.platform = platform;
	// 	this.publishedDate = publishDate;
	// 	this.lastModifiedDate = lastModifiedDate;

	// 	System.out.println(description.charAt(0));
	// 	System.out.println(description.charAt(description.length() - 1));

	// 	if (description != null && description.charAt(0) == '"'
	// 			&& description.charAt(description.length() - 1) == '"') {
	// 		this.description = description.substring(0, description.length() - 1);
	// 		System.out.println(this.description);
	// 	}

	// }

	// public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishedDate, LocalDateTime lastModifiedDate, boolean existsAtMitre, boolean existsAtNvd) {
	// 	this(vulnId, cveId, description, platform, publishedDate, lastModifiedDate);

	// 	this.existInMitre = existsAtMitre;
	// 	this.existInNvd = existsAtNvd;
	// }

	// /**
	//  * Constructor overload
	//  */
	// public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate,
	// 					 LocalDateTime lastModifiedDate, LocalDate fixedDate, boolean existInMitre, boolean existInNvd,
	// 		String[] sources, VdoCharacteristic[] vdoList, CvssScore[] cvssScoreList, Product[] products,
	// 		String exploitPublishDate, String exploitUrl) {

	// 	// call existing constructor
	// 	this(vulnId, cveId, description, platform, publishDate, lastModifiedDate, fixedDate, existInMitre, existInNvd,
	// 			sources, vdoList, cvssScoreList, products);

	// 	// set new parameters
	// 	this.exploitPublishDate = exploitPublishDate;
	// 	this.exploitUrl = exploitUrl;

	// 	if (fixedDate != null)
	// 		this.introducedDate = LocalDateTime.of(fixedDate, LocalTime.of(0,0,0));
	// }

	// public Vulnerability(int vulnId, String cveId, String description, String platform, LocalDateTime publishDate,
	// 					 LocalDateTime lastModifiedDate, LocalDate fixedDate, boolean existInMitre, boolean existInNvd,
	// 		String[] sources, VdoCharacteristic[] vdoList, CvssScore[] cvssScoreList, Product[] products) {
	// 	this.vulnId = vulnId;
	// 	this.cveId = cveId;
	// 	this.description = description;
	// 	this.platform = platform;
	// 	this.publishedDate = publishDate;
	// 	this.lastModifiedDate = lastModifiedDate;
	// 	this.fixedDate = fixedDate;
	// 	this.existInMitre = existInMitre;
	// 	this.existInNvd = existInNvd;
	// 	this.sources = sources;
	// 	this.vdoList = vdoList;
	// 	this.cvssScoreList = cvssScoreList;
	// 	this.products = products;

	// 	this.introducedDate = LocalDateTime.of(fixedDate, LocalTime.of(0,0,0));

	// 	// Filter out quotes in description
	// 	if (description != null && description.charAt(0) == '"'
	// 			&& description.charAt(description.length() - 1) == '"') {
	// 		this.description = description.substring(1, description.length() - 1);
	// 	}

	// 	// generate cpes
	// 	cpes = new String[products.length];
	// 	int i = 0;
	// 	for (Product p : products) {
	// 		cpes[i] = p.getCpe();
	// 		i++;
	// 	}
	// }
}