/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RSAT19CB0000020 awarded by the United
 * States Department of Homeland Security.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.entities;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.JoinFormula;
import org.hibernate.annotations.NaturalId;

@Entity
@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class Vulnerability {
	/*
	 * vulnerability ID. If there is a single vulnerability for a CVE, then CVE Id
	 * is also a unique identifier.
	 */
	@Id private int vulnId = 0;

	@NaturalId private String cveId; // CVE ID

	// map vuln description_id to description
	@ManyToOne @JoinColumn(name="description_id", referencedColumnName="descriptionId")
	private Description description; // CVE description text

	// alternate description
	// if mapped main desc is a user generated desc, this should find most recent system desc to dropdown
	// otherwise we won't have anything here
	@Transient private Description altDescription;

	@Basic private LocalDateTime publishedDate; // The date time it is published
	@Basic private LocalDateTime createdDate; // The time the entry is created at NVIP DB
	@Basic private LocalDateTime lastModifiedDate; // The most recent crawl date

	@ToString.Exclude
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinFormula("(" +
			"SELECT " +
			"    c.cvss_id " +
			"FROM " +
			"    cvss c " +
			"WHERE " +
			"    c.cve_id = cve_id " +
			"ORDER BY " +
			"    c.create_date DESC " +
			"LIMIT 1" +
			")")
	Cvss cvssScore;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<Exploit> exploits = new ArrayList<>();

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<AffectedProduct> affectedProducts = new ArrayList<>();
	@Transient private String[] cpes = null;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<VdoCharacteristic> vdoCharacteristics = new ArrayList<>();
	@Transient private VdoCharacteristic[] vdoList = null;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<Timegap> timegaps;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<PatchCommit> patchCommits;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<Fix> fixes;

	@ToString.Exclude
	@OneToMany(mappedBy="vulnerability")
	List<RawDescription> rawDescriptions;

	@ToString.Exclude
	@OneToOne(mappedBy = "vulnerability")
	SSVC ssvc;

	public String getDescriptionString() {
		return description.getDescription();
	}

	public Vulnerability(int vulnId, String cveId, LocalDateTime publishedDate, LocalDateTime lastModifiedDate, LocalDateTime createdDate) {
		this.vulnId = vulnId;
		this.cveId = cveId;
		this.publishedDate = publishedDate;
		this.lastModifiedDate = lastModifiedDate;
		this.createdDate = createdDate;
	}

	public boolean existsInMitre() {
		for (final Timegap t : this.timegaps) {
			if(t.getLocation().equals("mitre")) return true;
		}
		return false;
	}
	public boolean existsInNvd() {
		for (final Timegap t : this.timegaps) {
			if(t.getLocation().equals("nvd")) return true;
		}
		return false;
	}
}