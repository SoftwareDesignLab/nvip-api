/**
 * Copyright 2023 Rochester Institute of Technology (RIT). Developed with
 * government support under contract 70RCSA22C00000008 awarded by the United
 * States Department of Homeland Security for Cybersecurity and Infrastructure Security Agency.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.nvip.util;

import java.util.*;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import lombok.RequiredArgsConstructor;

import org.nvip.entities.*;
import org.springframework.stereotype.Service;

/**
 * Utility fuctions for generating Vulnerability (CVE) objects
 * @author Andrew
 *
 */
@Service
@RequiredArgsConstructor
public class VulnerabilityUtil {

	@PersistenceContext
	final EntityManager entityManager;

	public static String getCompanyProduct(String cpe) {
		String[] parts = cpe.split(":");
		if (parts.length > 4)
			return parts[3] + "-" + parts[4];
		return "Unknown";

	}

	public Description getAltDescription(Description mainDesc) {
		// main description will always be vulnerability's description_id

		// If description_id maps to user,
		// that means that user description is the most up to date information we have,
		// we don't need the system dropdown
		if (mainDesc.getIsUserGenerated() == 1)
			return null;

		// If description_id maps to system,
		// that means the system is the most up to date information we have.
		// But if there's a prior user description,
		// that takes precedence and the system should be in the dropdown
		else {
			List<Description> descs = entityManager.createQuery("""
				select d
				from Description d JOIN VulnerabilityVersion vv ON d.descriptionId = vv.description.descriptionId
				where vv.vulnerability.cveId = :cveId and d.isUserGenerated = 1
				order by vv.createdDate desc
			""", Description.class)
					.setParameter("cveId", mainDesc.getCveId())
					.getResultList();

			if (!descs.isEmpty())
				return descs.get(0);
		}

		// didn't find a prior user description
		return null;
	}
}
