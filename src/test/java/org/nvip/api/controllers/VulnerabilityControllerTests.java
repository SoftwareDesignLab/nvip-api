package org.nvip.api.controllers;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.nvip.data.repositories.VulnerabilityRepository;
import org.nvip.entities.Vulnerability;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.fail;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(VulnerabilityController.class)
@Disabled("Disabled until data can be inserted/mocked")
public class VulnerabilityControllerTests {

    @PersistenceContext
    EntityManager entityManager;

    @MockBean
    VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    MockMvc mockMvc;

    String testUri = "/vulnerabilities";

    @Test
    public void testSearchForReviewsReturnsSuccess(){
        try {
            mockMvc.perform(MockMvcRequestBuilders
                    .get(testUri)
                    .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk()
            );
        } catch (Exception e) {
            fail(e);
        }
    }

    @Test
    public void testSearchForReviewsWithCvssScoresReturnsSuccess(){
        try {
            mockMvc.perform(MockMvcRequestBuilders
                            .get(testUri+"?cvssScore=HIGH,LOW")
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk()
                    );
        } catch (Exception e) {
            fail(e);
        }
    }

    @Test
    public void testSearchForReviewByCveIdReturnsSuccess(){
        String cveId = "CVE-1234-1234";
        Vulnerability vuln = new Vulnerability(1, cveId,  LocalDateTime.now());
        entityManager.persist(vuln);

        try {
            mockMvc.perform(MockMvcRequestBuilders
                            .get(testUri+"/"+cveId)
                            .contentType(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk()
                    );
        } catch (Exception e) {

            System.out.println(e);
            fail();
        } finally {
            entityManager.remove(vuln);
        }
    }
}
