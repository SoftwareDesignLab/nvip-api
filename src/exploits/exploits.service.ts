import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Exploit, Vulnerability } from 'src/entities';
import { Repository } from 'typeorm';

@Injectable()
export class ExploitsService {
    constructor(
        @InjectRepository(Vulnerability)
        private vulnRepository: Repository<Vulnerability>,
        @InjectRepository(Exploit)
        private exploitRepository: Repository<Exploit>,
    ) {}

    async findVulnerability(cveId:string){
        const vulnerability=await this.vulnRepository.findOne({
            where:{
                cveId:cveId
            }
        })
        return vulnerability;
    }

    async create(createExploitDto: any) {
        
        var cves = createExploitDto.cve_id.split(',');
        for (var cve of cves){
            const currentCve=cve.trim()
            console.log(currentCve);
            const exploit =this.exploitRepository.create({
                cveId:currentCve,
                name:createExploitDto.name,
                source:createExploitDto.source,
                sourceUrl:createExploitDto.source_url,
                description:createExploitDto.description,
                fileContent:createExploitDto.file_content?createExploitDto.file_content:null,
                isRepo:createExploitDto.is_repo,
                datePublished:createExploitDto.date_published,
                exampleFile:createExploitDto.file_name,
                author:createExploitDto.author,
                downloadFailed:false,
                ignore:false,
                fixed:false,
                dateCreated:null
            });
            await this.exploitRepository.save(exploit)
           
        }
        return 'This action adds a new exploit';
    
    }

    findAll() {
        return `This action returns all exploits`;
    }

    findOne(id: number) {
        return `This action returns a #${id} exploit`;
    }

    update(id: number, updateExploitDto: any) {
        return `This action updates a #${id} exploit`;
    }

    remove(id: number) {
        return `This action removes a #${id} exploit`;
    }
}
